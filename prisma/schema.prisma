generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums para status
enum CartStatus {
  open
  closed
}

enum OrderStatus {
  pending
  paid
  cancelled
}

enum PaymentStatus {
  pending
  approved
  rejected
  cancelled
}

enum ProductType {
  SINGLE
  KIT
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  role          String    @default("user")
  password      String?
  resetToken    String?   // <-- nuevo
  resetTokenExp DateTime? // <-- nuevo
  accounts      Account[]
  sessions      Session[]
  googleId      String?   @unique
  sales         Sale[]
  payments      Payment[]
  carts         Cart[]  // 👈 agregá esta línea si no la tenías
  orders        Orders[]   // relación extra: usuario puede tener órdenes
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Product {
  id          String         @id @default(cuid())
  name        String         @unique
  brand       String         @default("")
  description String         @db.Text 
  price       Float
  stock       Int
  category    String
  type        ProductType    @default(SINGLE) // SINGLE o KIT
  packages    Package[]
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  sales       Sale[]         // Relación con Sale
  images      ProductImage[] // relación 1 a N con las imágenes
  cartItems   CartItem[]     // ⬅️ relación inversa: un producto puede estar en varios CartItem
  orderItems  OrderItem[]

  @@index([createdAt])
}

model Package {
  id        String   @id @default(cuid())
  productId String
  weightKg  Float
  widthCm   Float
  heightCm  Float
  depthCm   Float
  quantity  Int      // 👈 cantidad de bultos iguales

  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Payment {
  id        String   @id @default(cuid())
  paymentId String   @unique
  status    PaymentStatus  @default(pending)
  amount    Float
  createdAt DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  orders    Orders[]        // relación inversa

  @@index([createdAt])
}

model Sale {
  id        String   @id @default(cuid())
  paymentId String
  productId String
  userId    String
  quantity  Int
  amount    Float 
  createdAt DateTime @default(now())

  product Product @relation(fields: [productId], references: [id])
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([createdAt])
}

model ProductImage {
  id        String  @id @default(cuid())
  url       String
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Cart {
  id        String      @id @default(cuid())
  userId    String      
  status    CartStatus  @default(open)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  items     CartItem[]

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model CartItem {
  id        String   @id @default(cuid())
  cartId    String
  productId String
  quantity  Int

  cart    Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])
  
  @@unique([cartId, productId]) // Para evitar duplicados del mismo producto en un carrito
}

model Orders {
  id          String       @id @default(cuid())
  userId      String
  paymentId   String
  total       Float
  status      OrderStatus  @default(pending) // pending, paid, cancelled
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  payment     Payment      @relation(fields: [paymentId], references: [paymentId], onDelete: Cascade)
  items       OrderItem[]

  @@index([createdAt])
}

model OrderItem {
  id        String   @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  unitPrice Float

  orders     Orders    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id])

  @@unique([orderId, productId]) // evita duplicados de producto en una orden
}

